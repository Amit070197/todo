{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/Todolist.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","Todolist","setTodos","test","newTodos","updatedTodos","iscomplete","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAuDeA,MArDf,SAAkBC,GACf,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAO,IAAlE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAarB,OACI,sBAAMW,UAAU,YAAYC,SAXZ,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAGC,KAAKC,MAAsB,IAAhBD,KAAKE,UACnBC,KAAMjB,IAGVC,EAAS,KAGR,SACCL,EAAME,KACH,qCACE,uBACMoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EAAOoB,KAAK,OAAOV,UAAU,aACpCW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,cAAlB,uBAGN,qCACE,uBACIQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EAAOoB,KAAK,OAAOV,UAAU,aACpCW,SAAUd,EACVe,IAAKpB,IAER,wBAAQQ,UAAU,cAAlB,4B,sBCAEa,MAzCf,YAA6D,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,WAAWC,EAAa,EAAbA,WAC5C,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQPyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAsB,WAAxD,UACI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SAA0DiB,EAAKb,MAArDa,EAAKjB,IAEf,sBAAKH,UAAY,QAAjB,UACI,cAAC,IAAD,CACEuB,QAAW,kBAAMP,EAAWI,EAAKjB,KACjCH,UAAY,gBAId,cAAC,IAAD,CACEuB,QAAW,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACnDP,UAAY,mBAZmDqB,OCqBlEG,MA3Cf,WACG,MAAyBrC,mBAAS,IAAlC,mBAAO2B,EAAP,KAAaW,EAAb,KAiCC,OACI,gCACI,2DACA,cAAC,EAAD,CAAUxB,SAlCH,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAGF,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OA6BF,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAbP,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,IAAKA,IACViB,EAAKS,YAAcT,EAAKE,YAErBF,KAEXK,EAASG,IAM2CZ,WAlBrC,SAAAb,GACf,IAAM2B,EAAY,YAAIhB,GAAOiB,QAAO,SAAAX,GAAI,OAAIA,EAAKjB,KAAMA,KACvDsB,EAASK,IAgBqEb,WA1B/D,SAACe,EAAQC,GACpBA,EAAS1B,OAAQ,QAAQmB,KAAKO,EAAS1B,OAG3CkB,GAAS,SAAAS,GAAI,OAAIA,EAAKf,KAAI,SAAAgB,GAAI,OAAKA,EAAKhC,KAAM6B,EAASC,EAAWE,eCN3DC,MARf,WACE,OACE,qBAAKpC,UAAU,WAAf,SACE,cAAC,EAAD,OCHNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8e45212a.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef } from 'react'\n\nfunction TodoForm(props) {\n   const [input, setInput] = useState(props.edit ? props.edit.value: '');\n   \n   const inputRef = useRef(null)\n\n   useEffect(() => {\n       inputRef.current.focus()\n   })\n\n   const handleChange = e =>{\n       setInput(e.target.value);\n   }\n   \n   const handleSubmit = e => {\n       e.preventDefault();\n\n       props.onSubmit({\n           id:Math.floor(Math.random() * 10000),\n           text: input\n       });\n\n       setInput('');\n   };  \n    return (\n        <form className='todo-form' onSubmit={handleSubmit}>\n        {props.edit ?( \n            <>\n              <input\n                    type='text'\n                    placeholder='Update your item'\n                    value={input} name='text' className='todo-input'\n                    onChange={handleChange}\n                    ref={inputRef}\n               />\n                <button className='todo-button'>Update</button>\n            </>\n        ) :\n        ( <>\n            <input\n                type='text'\n                placeholder='Add a todo'\n                value={input} name='text' className='todo-input'\n                onChange={handleChange}\n                ref={inputRef}\n            />\n             <button className='todo-button'>Add todo</button> \n             </>\n          )}   \n        </form>\n         \n    )\n}  \n\nexport default TodoForm\n  ","import React, {useState} from 'react';\nimport TodoForm from './TodoForm';\nimport Todolist from './Todolist';\nimport {RiCloseCircleLine} from 'react-icons/ri';\nimport {TiEdit} from 'react-icons/ti';\n\nfunction Todo({todos, completeTodo, removeTodo,updateTodo}) {\n   const [edit, setEdit] = useState({\n       id: null,\n       value: ''\n   });\n\n   const submitUpdate = value => {\n       updateTodo(edit.id, value)\n       setEdit({\n           id: null,\n           value: ''\n       })\n   }\n\n   if (edit.id){\n       return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n   }\n\n    return todos.map((todo, index) =>(\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index} >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>{todo.text}\n            </div>\n            <div className = \"icons\">\n                <RiCloseCircleLine \n                  onClick = {() => removeTodo(todo.id)}\n                  className = 'delete-icon'\n\n                />\n                \n                <TiEdit \n                  onClick = {() => setEdit({id: todo.id, value: todo.text})}\n                  className = 'edit-icon'\n                />\n            </div>\n        \n        </div>\n    ));\n        \n      \n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo'\nfunction Todolist() {\n   const [todos,setTodos] = useState([]); \n\n   const addtodo = todo => {\n       if(!todo.text || /^\\s*$/.test(todo.text)){\n           return\n       }\n     const newTodos = [todo, ...todos];\n     \n     setTodos(newTodos);\n   };\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\n            return\n        }\n        setTodos(prev => prev.map(item => (item.id ===todoId ? newValue : item)));\n    }\n\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !==id);\n        setTodos(removeArr);\n    };\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id ==id) {\n                todo.iscomplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    };\n    return (\n        <div>\n            <h1>Whats the plan for today?</h1>\n            <TodoForm onSubmit={addtodo}/>\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo = {removeTodo} updateTodo={updateTodo }/>\n        </div>\n    )\n}\n\nexport default Todolist\n","import React from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport Todolist from './components/Todolist';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <Todolist/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}